# DFS(Depth-First SEarch) 깊이 우선 탐색
# 그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘

'''
인접 행렬 방식(Adjacency Matrix)
2차원 배열에 각 노드가 연결된 형태를 기록하는 방식
5-6 인접 행렬 방식 예제
'''

INF = 999999999 # 무한의 비용 선언

# 2차원 리시트를 이용해 인접 행렬 표현
graph = [
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]

print(graph)

'''
인접 리스트 방식(Adjacency List)
모든 노드에 연결된 노드에 대한 정보를 차례대로 연결하여 저장
5-7 인접 리시트 방식 예제
'''

# 행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보 저장(노드, 거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보 저장(노드, 거리)
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보 저장(노드, 거리)
graph[2].append((0, 5))

print(graph)

'''
인접 행렬 방식: 정보는 빨리 얻으나 메모리 낭비가 있음
인접 리스트 방식: 메모리 낭비는 덜하나 정보를 늦게 얻음
'''
